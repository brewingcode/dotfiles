#!/usr/bin/env perl

# usage: lev <word> [FILE ...]
#
# prints the Levenshtein distance of a word against a list of words from
# file(s) or stdin

use strict;
use warnings;
use List::Util qw(min);

(my $needle = shift) or die "error: missing word as first arg\n";

sub lev
{
    my ($str1, $str2) = @_;
    my @ar1 = split //, lc($str1);
    my @ar2 = split //, lc($str2);

    my @dist;
    $dist[$_][0] = $_ foreach (0 .. @ar1);
    $dist[0][$_] = $_ foreach (0 .. @ar2);

    foreach my $i (1 .. @ar1) {
        foreach my $j (1 .. @ar2) {
            my $cost = $ar1[$i - 1] eq $ar2[$j - 1] ? 0 : 1;
            $dist[$i][$j] = min(
                            $dist[$i - 1][$j] + 1,
                            $dist[$i][$j - 1] + 1,
                            $dist[$i - 1][$j - 1] + $cost
                             );
        }
    }

    return $dist[@ar1][@ar2];
}

my @distances;
while (<>) {
    chomp;
    push @distances, [lev($needle, $_), $_];
}

print "$_->[0] $_->[1]\n" for sort { $a->[0] <=> $b->[0] } @distances;
