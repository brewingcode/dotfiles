#!/usr/bin/env python

# calculate apoapsis/periapsis speed and orbital period for small body
# orbiting a large body in an elliptical orbit (not para/hyperbolic)

import sys, math, re

# standard gravitational params (in km^3 s^-2 )
# http://en.wikipedia.org/wiki/Standard_gravitational_parameter
sgp = {
    'sun': 132712440018,
    'earth': 398600.4418,
    'moon': 4902.8000,
    'mars': 42828,
    'kerbin': float("3.5316e3"),
    'c7p': 0.000000209438,
    'jupiter': 126686534,
    'saturn': 37931187,
    'vesta': 17.28,
    'ceres': 63.1
}

# body radius (in km)
radii = {
    'sun': 695000,
    'earth': 6371,
    'moon': 1737,
    'mars': 3390,
    'kerbin': 600,
    'c7p': 2,
    'jupiter': 69911,
    'saturn': 57316,    # equitorial radius is 60268, polar radius is 54364
    'vesta': 525.4/2,
    'ceres': 471
}

usage = """orb ORBIT [BODY]

Calculate velocities, period, and eccentricity of ORBIT around BODY.

By default, BODY is the Earth. ORBIT can be things like:

    300               LEO, 300km x 300km (km by default)
    270x36000         GTO, 270km x 36000 km
    35.1aux.586au     Halley's Comet (assuming BODY="sun")
    1aux1au           Earth's orbit (assuming BODY="sun")

Pass "list" to list known bodies."""

if len(sys.argv) < 2 or '--help' in sys.argv:
    print usage
    sys.exit(1)

if sys.argv[1].lower() == 'list':
    fmt = '{: <8} {: <8} {: <8}'
    print fmt.format('NAME', 'RADIUS', 'SGP')
    for k in sorted(radii, key=radii.get):
        print fmt.format(k, radii[k], sgp[k])
    sys.exit(0)

ap = None
pe = None
body = None

# given a string representing a distance, return a numeric orbital radius
def to_radius(s):
    m = re.match(r'(.*?)(km|au)?$', s.lower(), flags=re.I)
    n = float(m.group(1))
    if m.group(2) and m.group(2).lower() == 'au':
        n = n * 149597871

    # any orbit within 10x the body radius is assumed to be an altitude above
    # that body, and so must account for the body's radius
    if n < radii[body] * 10:
        n += radii[body]
    return n

# given a semi-major axis and an orbital radius, return the velocity
def vel(sma, r, per='second'):
    # http://en.wikipedia.org/wiki/Elliptic_orbit#Velocity
    v = math.sqrt( sgp[body] * ( 2/r - 1/sma ) )
    if per == 'second':
        if v < 1:
            return "{:.4f} m/s".format(1000*v)
        else:
            return "{:.4f} km/s".format(v)
    else:
        return "{:.0f} km/h".format(v*3600)

# given a sma, return the orbital period
def period(sma):
    # http://en.wikipedia.org/wiki/Elliptic_orbit#Orbital_period
    return 2 * math.pi * math.sqrt( sma**3 / sgp[body] )

# given an apoapsis and periapsis, return the eccentricity
def eccentricity(a,p):
    return 1 - 2 / ( a/p + 1 )

# given a numeric time (in seconds), return an abbreviated string
def sec_to_string(t):
    if t < 60:
        return "{:.2f} seconds".format(t)
    else:
        m = t / 60;
        if m < 60:
            return "{:.2f} minutes".format(m)
        else:
            h = m / 60;
            if h < 24:
                return "{:.2f} hours".format(h)
            else:
                d = h/24
                if d < 365:
                    return "{:.2f} days".format(d)
                else:
                    return "{:.2f} years".format(d/365)

if len(sys.argv) > 2:
    body = sys.argv[2].lower()
else:
    body = 'earth'

m = re.search(r'(.*?)x(.*)', sys.argv[1])
if m:
    ap = to_radius(m.group(1))
    pe = to_radius(m.group(2))
else:
    ap = to_radius(sys.argv[1])
    pe = ap
if pe > ap:
    ap,pe = pe, ap

sma = ( ap + pe ) / 2

print "orbit:    {}km x {}km around {}".format(ap, pe, body)
print "ap speed: {} ({})".format(vel(sma, ap), vel(sma, ap, 'hour'))
print "pe speed: {} ({})".format(vel(sma, pe), vel(sma, pe, 'hour'))
print "period:   {}".format(sec_to_string(period(sma)))
print "eccentr:  {:.4f}".format(eccentricity(ap, pe))

