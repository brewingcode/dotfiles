#!/bin/bash

# generates SSL certs:
#   - ca.crt and ca.key are the self-signing cert authority files, and will
#     NOT be created if they already exist
#   - DOMAIN.crt and DOMAIN.key are for the particular domain(s)
#
# examples:
#   ./ssl-cert *.example.com example.com some-other-domain.com
#   ./ssl-cert localhost some-name.local

domain="$1"
[ -z "$domain" ] && { echo "domain required" >&2; exit 1; }
filename="${domain//\*/STAR}"

for f in "$filename.{key,crt}"; do
    [ -f "$f" ] && { echo "refusing to overwrite existing file: $f" >&2; exit 2; }
done

key_size=2048

san_cert() {
    cat > tmp-ssl.cnf <<EOF
[ req ]
distinguished_name = req_distinguished_name
req_extensions     = v3_req
prompt             = no

[ v3_req ]
keyUsage           = keyEncipherment, dataEncipherment, digitalSignature, nonRepudiation
extendedKeyUsage   = serverAuth
subjectAltName     = @alt_names

# note that we're just specifing the "CN"/"commonName" of the SSL subject, add
# the rest if you really want to:
#   - [C]ountry (must be 2 letters)
#   - [ST]ate
#   - [L]ocality
#   - [O]rganization
#   - [O]rganizational [U]nit

[ req_distinguished_name ]
commonName         = $domain

[ alt_names ]
EOF
    i=1
    for x in "$@"; do
        echo "DNS.$i = $x" >> tmp-ssl.cnf
        ((i++))
    done
}

# generate the certificate authority private key, if needed
if [ -f ca.key ] ; then
    echo "re-using CA key: ca.key"
else
    openssl genrsa -out ca.key "$key_size"
fi

# self-sign the certificate authority, and then trust our newly minted certificate authority
if [ -f ca.crt ]; then
    echo "re-using CA cert: ca.crt"
else
    openssl req -x509 -new -nodes -key ca.key -sha256 -days 1024 -out ca.crt -subj "/CN=$domain"
    sudo security add-trusted-cert -d -r trustRoot -k "/Library/Keychains/System.keychain" ca.crt
fi

# generate the local domain key
openssl genrsa -out "$filename.key" "$key_size"

# generate the certificate signing request for the local certificate, with SAN enabled
san_cert "$@"
openssl req -new -key "$filename.key" -out tmp-local.csr -config tmp-ssl.cnf

# generate the local domain cert and sign it with ca.cert
openssl x509 -req -in tmp-local.csr -CA ca.crt -CAkey ca.key -CAcreateserial -out "$filename.crt" -days 512 -sha256 -extensions v3_req -extfile tmp-ssl.cnf

# spit out a copy of fullchain.pem
openssl req -new -x509 -key ca.key > fullchain.pem

# cleanup (note: ca.srl is left hanging around, maybe delete it too...?)
rm -f tmp-{local.csr,ssl.cnf}
