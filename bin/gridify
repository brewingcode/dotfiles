#!/usr/bin/env python

# gridify text, see --help

import sys
import argparse
from tabulate import tabulate
import codecs

def parse_args():
    global args
    parser = argparse.ArgumentParser(description="""
Takes character-separated data in files or stdin and turns it into a grid,
just like mysql can do, using the tabulate[1] library.

Note: if --sepchar is a single space, multiple spaces will be collapsed into
a single space.

Examples:

    # chops all columns to 10 chars max, and only prints the 1st and 3rd column
    %(prog)s --truncate 10 --limit 0,2

[1] https://bitbucket.org/astanin/python-tabulate
""", formatter_class=argparse.RawDescriptionHelpFormatter)
    parser.add_argument('--limit', '-l',
        help='limit output to column indicies (0-based) (default: none)')
    parser.add_argument('--format', '-f', default='psql',
        help='format to use for printing, see tabulate\'s options (default: psql)')
    parser.add_argument('--truncate', '-t', metavar='N',
        help='truncate column content to N letters')
    parser.add_argument('--sepchar', '-s', default='\t',
        help='separating character between fields (default: \\t)')
    args, remaining = parser.parse_known_args()
    args.files = remaining
    args.truncate = int(args.truncate) if args.truncate else 0
    args.limit = [int(x) for x in args.limit.split(',')] if args.limit else []

def get_lines(fh):
    for line in fh:
        fields = [v.strip() for v in line.rstrip().split(args.sepchar)]
        if args.sepchar == ' ':
            fields = [v for v in fields if len(v) > 0]

        if len(args.limit):
            fields = [v for i,v in enumerate(fields) if i in args.limit]

        if args.truncate > 0:
            fields = [v[:args.truncate] for v in fields]

        yield fields

def print_file(fh):
    table = tabulate(get_lines(fh), tablefmt=args.format)
    print(table)

if __name__ == '__main__':
    parse_args()
    if args.files:
        for f in args.files:
            with codecs.open(f, 'r', 'utf-8') as fh:
                print_file(fh)
    else:
        print_file(sys.stdin)
