#!/usr/bin/env python

# gridify text, see --help

import sys
import argparse
from tabulate import tabulate
import codecs

def parse_args():
    global args
    parser = argparse.ArgumentParser(description='Takes tab-sep data in files or stdin and turns it into a grid, just like mysql can do.')
    parser.add_argument('--ex', help='which column indicies (0-based) to print (default: all)')
    parser.add_argument('--plain', action='store_true', help='omit grid lines, but still print aligned columns')
    parser.add_argument('--truncate', metavar='N', help='truncate column content to N letters')
    args, remaining = parser.parse_known_args()
    args.files = remaining
    args.truncate = int(args.truncate) if args.truncate else 0
    args.ex = [int(x) for x in args.ex.split(',')] if args.ex else []

def get_lines(fh):
    for line in fh:
        fields = line.rstrip().split('\t')

        if len(args.ex):
            fields = [v for i,v in enumerate(fields) if i in args.ex]

        if args.truncate > 0:
            fields = [v[:args.truncate] for v in fields]

        yield fields

def print_file(fh):
    fmt = 'plain' if args.plain else 'psql'
    table = tabulate(get_lines(fh), tablefmt=fmt)
    print(table)

if __name__ == '__main__':
    parse_args()
    if args.files:
        for f in args.files:
            with codecs.open(f, 'r', 'utf-8') as fh:
                print_file(fh)
    else:
        print_file(sys.stdin)
