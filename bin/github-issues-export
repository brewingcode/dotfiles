#!/usr/bin/env python

"""
Exports Issues from a specified repository to a CSV file

Uses basic authentication (Github username + password) to retrieve Issues
from a repository that username has access to. Supports Github API v3.
"""
import csv
import requests
import getpass

GITHUB_USER = raw_input("github.com user: ")
GITHUB_PASSWORD = getpass.getpass("github.com password: ")
REPO = raw_input("'USER/REPO' value: ")
ISSUES_FOR_REPO_URL = 'https://api.github.com/repos/%s/issues' % REPO
AUTH = (GITHUB_USER, GITHUB_PASSWORD)

def original_headers():
  csvout.writerow(('id', 'Title', 'Body', 'Created At', 'Updated At'))

def original_issue(issue):
  labels = issue['labels']
  for label in labels:
    if label['name'] == "Client Requested":
      csvout.writerow([issue['number'], issue['title'].encode('utf-8'), issue['body'].encode('utf-8'), issue['created_at'], issue['updated_at']])

def syi_headers():
  csvout.writerow(('id', 'title', 'assgined'))

def syi_issue(issue):
  milestone = issue['milestone']
  if milestone == 'V1.0 Required':
    csvout.writerow([issue['number'], issue['title'].encode('utf-8'), issue['assigned'].encode('utf-8')])

def write_issues(response):
  "output a list of issues to csv"
  if not r.status_code == 200:
    raise Exception(r.status_code)
  for issue in r.json():
    # original_issue(issue)
    syi_issue(issue)

r = requests.get(ISSUES_FOR_REPO_URL, auth=AUTH)
csvfile = '%s-issues.csv' % (REPO.replace('/', '-'))
csvout = csv.writer(open(csvfile, 'wb'))
# original_headers()
syi_headers()
write_issues(r)

#more pages? examine the 'link' header returned
if 'link' in r.headers:
  pages = dict(
    [(rel[6:-1], url[url.index('<')+1:-1]) for url, rel in
      [link.split(';') for link in
        r.headers['link'].split(',')]])
  while 'last' in pages and 'next' in pages:
    r = requests.get(pages['next'], auth=AUTH)
    write_issues(r)
    if pages['next'] == pages['last']:
      break
