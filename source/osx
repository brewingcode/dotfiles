# OSX-only stuff. Abort if not OSX.
is_osx || return 1

# https://unix.stackexchange.com/a/221988
ulimit -n 10000

# Trim new lines and copy to clipboard
alias c=pbcopy
alias e=pbpaste # i have conflicts with p, a, s, and t if you can believe it
alias v=pbpaste # wait, ctrl-c and ctrl-v are pretty much universal, so just c and v are good

# Make 'less' more.
[[ "$(command -v lesspipe.sh > /dev/null 2>&1)" ]] && eval "$(lesspipe.sh)"

# Start ScreenSaver. This will lock the screen if locking is enabled.
alias ss="open /System/Library/Frameworks/ScreenSaver.framework/Versions/A/Resources/ScreenSaverEngine.app"

# APFS blends two volumes into one, we don't need to crawl Data
alias ncdu_osx='sudo ncdu --exclude /System/Volumes/Data -x /'

# restart wifi
function rswifi {
  ifc="${1:-en0}"
  networksetup -setairportpower "$ifc" off
  sleep 15
  networksetup -setairportpower "$ifc" on
}

# restart a Macports daemon
function portre {
  sudo port unload $1
  sudo port load $1
}

# list all launchd's
function launchds {
  find /Library/Launch* /System/Library/Launch* $HOME/Library/Launch* -ls | perl -lpe 's/^\d+\s+\d+\s+//'
}

code () { VSCODE_CWD="$PWD" open -n -b "com.microsoft.VSCode" --args "$@" ;}

# prettify Chrome's "copy as curl" command line
function recurl {
  pbpaste | perl -lpe '
    s/^curl ('\''.*?'\'')/curl /;
    $_ .= " \\\n $1";
    s/ -H/ \\\n  -H/g;
    s/ --(\S+)/ \\\n  --$1/g;
  '
}

# "copy last command"
alias clc="fc -ln -1 | awk '{\$1=\$1}1' | pbcopy"

# switch java versions via OSX's java_home
jvm() {
  version=${1:-1.6}
  export JAVA_HOME=$(/usr/libexec/java_home -v $version)
}

# copies the latest jquery into clipboard, so you can then paste it into a
# browser dev console and get jquery in your page
jquery() {
  curl -qs 'https://code.jquery.com/jquery-3.1.1.slim.min.js' | pbcopy
}

# start a completely new Chrome instance
# NOTE: extra args are passed through to Chrome.app, eg:
#   newchr --disable-extensions
newchr() {
  user_dir="/tmp/$(openssl rand -hex 5)"
  mkdir -p "$user_dir"
  echo "temporary user data dir: $user_dir"
  open -na 'Google Chrome' --args --user-data-dir="$user_dir" "$@"
}

# filter output of `log` for human readability
#
# Given this line:
# 2018-12-05 13:56:20.499451-0800 0x2830869  Info        0x0                  114    14   backupd-helper: (TimeMachine) [com.apple.TimeMachine:TMLogInfo] Not starting scheduled Time Machine backup: No destinations resolvable
# 0          1                    2          3           4                    5      6    7               8             9                                 10  11       ...
#
# We output 0 1 3 7 10 11 ..., while also handling the case where column 6 just doesn't exist at all
tmlog_filter() {
  perl -MScalar::Util=looks_like_number -lane '
    if (/^\d{4}/) {
      my ($t) = $F[1] =~ /^(.*)\./;
      my @bits = ($F[0], $t, $F[3]);
      splice(@F, 0, 6);
      if (looks_like_number($F[0])) {
        shift(@F);
      }
      print join(" ", @bits, grep { !/^(\(TimeMachine\)|\[com\.apple\.TimeMachine:TMLog\w+\])$/ } @F);
    }
    else {
      print;
    }
  '
}

# tail the time machine system messages
tmlog() {
  last="${1:-2h}"
  log show   --predicate 'subsystem == "com.apple.TimeMachine"' --info --debug --last "$last" | tmlog_filter
  log stream --predicate 'subsystem == "com.apple.TimeMachine"' --info --debug                | tmlog_filter
}

# "sshfs mount"
#   smnt on|off HOST:REMOTE_DIR LOCAL_DIR [SSH_OPTS]
smnt() {
  opts="noappledouble"
  [[ -n "$4" ]] && opts="$opts,$4"
  case $1 in
    on ) mkdir -p "$3"; sshfs -o "$opts" "$2" "$3" ;;
    off) sudo diskutil unmount force "$3" ;;
    *) { echo "nothing to do: need 'on' or 'off'" >&2; } ;;
  esac
}

# Catalina onwards
export BASH_SILENCE_DEPRECATION_WARNING=1

# brew outdated leaves
brew-ol() {
  (printf 'installed\toutdated\tboth\n' && comm <(brew leaves) <(brew outdated | cut -f 1)) | mdtable
}

# default iterm profile
dp() {
  iterm2-profile Default
  export ITERM_PROFILE=Default
}

reset-activity-monitor() {
  rm ~/Library/Preferences/com.apple.ActivityMonitor.plist*
}

dockpriv() {
  sudo launchctl enable system/com.docker.vmnetd
  sudo rm -f /Library/LaunchDaemons/com.docker.vmnetd.plist
  sudo rm -f /Library/PrivilegedHelperTools/com.docker.vmnetd
}

recov() {
  sudo nvram recovery-boot-mode=unused
  echo "reboot when ready"
}

alias tp='open -a TablePlus'

