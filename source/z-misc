# Case-insensitive globbing (used in pathname expansion)
shopt -s nocaseglob

# Check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

alias grep="grep --color=auto --line-buffered"
alias egrep="egrep --color=auto --line-buffered"
alias fgrep="fgrep --color=auto --line-buffered"

# other useful options: --vcs=git --by-file
alias cloc="cloc --script-lang=CoffeeScript,coffee --script-lang=JavaScript,node"

# editors
export EDITOR=vim
export VISUAL="$EDITOR"

# Prevent less from clearing the screen while still showing colors.
export LESS=-XR

# Set the terminal's title bar.
function titlebar() {
  echo -n $'\e]0;'"$*"$'\a'
}

# SSH auto-completion based on entries in known_hosts.
if [[ -e ~/.ssh/known_hosts ]]; then
  complete -o default -W "$(cat ~/.ssh/known_hosts | sed 's/[, ].*//' | sort | uniq | grep -v '[0-9]')" ssh scp sftp
fi

# Disable ansible cows }:]
export ANSIBLE_NOCOWS=1

export PYTHONPATH=$DOTFILES/lib
export NODE_PATH="$DOTFILES/lib/node_modules:$NODE_PATH"

# find, and then sum the size of everything in KB
function finds {
  find "$@" -ls | awk '{X+=$7} END {print X/1000}'
}

# find, sort by time
findt() {
  find=gfind
  gfind --help > /dev/null || find=find
  $find "$@" -printf "%T+\t%p\n" | sort
}

# truncate stdin exactly to term width
function trunc {
  cut -c -$(tput cols)
}

# grep -C<x> does stupid things in its output, fix them
#   * the same line might be printed twice
#   * "--" twice in a row is dumb
function cgrep {
  grep -n "$@" | perl -lne '
    $x{$1} = $3 if /^(\d+)(:|-)(.*)/;
    END {
      for (sort {$a <=> $b} keys %x ) {
        print "--" if $p and $_ - $p > 1;
        print $x{$_};
        $p = $_
      }
    }
  '
}

function hex2bin {
  perl -e '
    for $arg (@ARGV) {
      $hexlen = length $arg;
      $binlen = $hexlen * 4;
      print unpack "B$binlen", pack "H$hexlen", $arg;
      print "\n";
    }
  ' "$@"
}

# vim minimal (no rc file)
function vimm {
  vim -u /dev/null "$@"
}

# days_since YYYY M D
function days_since {
  python -c "from datetime import date; print (date.today() - date($1, $2, $3)).days"
}

function mkown {
  sudo mkdir -p "$@" && sudo chown "$USER" "$@"
}

# for example, `ls -d $HOME/$H`
export H=".!(|.)"

alias ..='cd ..'

function deadlinks {
  find . -type l ! -exec test -e {} \; -print
}

function rsyncinc {
  rsync -aP --include '*/' --include "$1" --exclude '*' "${@:2}"
}

function mkcd {
  mkdir -p "$1" && cd "$1"
}

# open a couple pages that are nice for full-screen ISS tracking
function hdev {
  for x in 'ustream.tv/embed/17074538?autoplay=1&volume=0&controls=false' 'lizard-tail.com/isana/tracking/'; do
    #open "http://www.$x"
    /Applications/Google\ Chrome.app/Contents/MacOS/Google\ Chrome --app="http://www.$x"
  done
}

# similar to bash's `which`, this finds a python module using
# the imp.find_module builtin
function pywhich {
  python - "$1" <<EOF
import imp
import sys

def int_to_const(i):
  for c in ['PY_SOURCE', 'PY_COMPILED', 'C_EXTENSION', 'PKG_DIRECTORY', 'C_BUILTIN', 'PY_FROZEN']:
    if getattr(imp, c) == i: return c

m = imp.find_module(sys.argv[1])
m = list(m)
m[2] = list(m[2])
m[2][2] = int_to_const(m[2][2])
print m
EOF
}

function strip_ansi {
  # http://unix.stackexchange.com/a/4529
  perl -pe 's/\e\[?.*?[\@-~]//g'
}

function dunno {
  echo "¯\_(ツ)_/¯"
}

export NVM_DIR=~/.nvm
[ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"  # This loads nvm

slink() {
  [ -z "$1" ] && { echo 'filename required' >&2; return 1; }
  target="$(pwd)/$1"
  [ -x "$target" ] || { echo "$target is not an executable file" >&2; return 2; }

  (cd /usr/local/bin && ln -s "$target")
}

alias imgsize="identify -format '%f	%w	%h	%b\n'"

# generate a random 6-digit hex color, and then create a 100x100 swatch image of it
# (if a filename is given), or simply echo the color
# note: the color is between #222 and #ddd, to rule out very dark and very light colors
randcolor() {
  color=$(perl -e '@v = (2..9, "a".."d"); for (0..5) { print $v[int rand scalar @v] } print "\n"')
  if [[ -n "$1" ]]; then
    w="${2:-100}"
    h="${3:-100}"
    convert -size "${w}x${h}" xc:"#$color" "$1"
  else
    echo "#$color"
  fi
}

ptouch() {
  for p do
    d="$(dirname -- "$p")"
    mkdir -p -- "$d" && touch -- "$p"
  done
}

flip_tables() {
  echo "(╯°□°)╯︵ ┻━┻"
  echo "┬─┬ノ(ಠ_ಠノ)"
}

dockwipe() {
  docker stop $(docker ps -a -q)
  docker system prune -a
}

dumbtext() {
  # remove all non-ascii chars, and replace \r with \n
  # this is a very dumb thing to do, but it's occasionally the easiest thing
  perl -pe 's/[^\x00-\x7f]//g; s/\r/\n/g;'
}

bin2hex() {
  cat "${1:-/dev/stdin}" | \
  # Convert binary to hex using xxd in plain hexdump style
  xxd -ps | \
  # Put spaces between each pair of hex characters
  sed -E 's/(..)/\1/g' | \
  # Merge lines
  tr -d '\n'
}

sshme() {
  eval $(ssh-agent)
  ssh-add
}

# converts raw utf8 byte sequences for certain characters that people
# love to paste everywhere
#   e2809c   left smartquote
#   e2809d   right smartquote
#   e28098   left smartapos
#   e28099   right smartapos
dumbquote() {
  perl -pe 's/\xe2\x80(\x9c|\x9d)/"/g; s/\xe2\x80(\x98|\x99)/'"'"'/g'
}

# coffeescript + es
# run coffeescript out of our dotfiles lib directory for Babel bullshit. Babel
# is unwilling to consider the case where you use a globablly-installed
# node_modules, so we need to hack it together
ces() {
  # collect symlinks to cleanup later
  paths=()

  # symlink in everything we'll need
  if ! [ -d node_modules/@babel ]; then
    mkdir -p node_modules/@babel
  fi
  for i in core node preset-env polyfill; do
    if ! [ -d node_modules/@babel/$i ]; then
      ln -s "$DOTFILES/lib/node_modules/@babel/$i" "node_modules/@babel/$i"
      paths+=("node_modules/@babel/$i")
    fi
  done
  if ! [ -f .babelrc ]; then
    ln -s "$DOTFILES/lib/.babelrc" .babelrc
    paths+=(.babelrc)
  fi

  # run the actual command
  coffee --transpile "$@"
  rc=$?

  # cleanup
  for p in "${paths[@]}"; do
    rm "$p"
  done
  find node_modules -type d -empty -delete

  return $rc
}

stripshell() {
  sed 's/\x1b\[[0-9;]*m//g'
}
export BASH_SILENCE_DEPRECATION_WARNING=1

tld-backup() {
  cd ~/.local/share/Hinterland/TheLongDark
  savefile=$(ls -1t sandbox* | head -1)
  cp "$savefile" "backups/$(date '+%Y-%m-%d %H.%M.%S')-$savefile.backup"
  echo "$savefile backed up"
}

rebash() {
  env -i bash --noprofile --norc
}
